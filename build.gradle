plugins {
    id "fabric-loom" version "1.0-SNAPSHOT"
}

repositories {
    maven { name "Carpet"; url "https://masa.dy.fi/maven" }
    maven { name "Translation"; url "https://maven.nucleoid.xyz" }
    maven { name "Permission"; url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { name "Fake Player Api"; url "https://maven.cafeteria.dev/releases" }
    maven { name "Floodgate Api"; url "https://repo.opencollab.dev/main" }
    exclusiveContent {
        forRepository {
            maven { name "Modrinth"; url "https://api.modrinth.com/maven" }
        }
        filter {includeGroup "maven.modrinth" }
    }
    mavenLocal()
}

archivesBaseName = "${project.mod_id}-mc${project.minecraft_version}"
version = "${project.mod_version}"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

loom {
    accessWidenerPath = file("src/main/resources/easyauth.accesswidener")
    serverOnlyMinecraftJar()
    log4jConfigs.from(file("log4j.xml"))
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Translations
    include modImplementation("fr.catcore:server-translations-api:${project.server_translations_version}+${project.server_translations_branch}")

    // Permissions
    include modImplementation("me.lucko:fabric-permissions-api:${project.fabric_permissions_version}")

    // Placeholder API
    include modImplementation("eu.pb4:placeholder-api:${project.placeholder_api_version}+${project.placeholder_api_branch}")

    // Mods
    modImplementation "carpet:fabric-carpet:${project.carpet_branch}-${project.carpet_core_version}"
    modImplementation "dev.cafeteria:fake-player-api:${project.fake_player_api_version}"
    modImplementation "org.geysermc.floodgate:api:${floodgate_api_version}"
    modApi "maven.modrinth:cc-restitched:${project.cc_version}"

    // Password hashing
    // Argon2
    include implementation("de.mkammerer:argon2-jvm:${argon2_version}")
    include implementation("de.mkammerer:argon2-jvm-nolibs:${argon2_version}")

    // BCrypt
    include implementation("at.favre.lib:bcrypt:${bcrypt_version}")
    include implementation("at.favre.lib:bytes:${bytes_version}")

    // Storage
    // LevelDB database
    include implementation("org.iq80.leveldb:leveldb:${leveldb_version}")
    include implementation("org.iq80.leveldb:leveldb-api:${leveldb_version}")

    // MongoDB driver
    include implementation("org.mongodb:mongodb-driver-sync:${mongodb_version}")
    include implementation("org.mongodb:mongodb-driver-core:${mongodb_version}")
    include implementation("org.mongodb:bson:${mongodb_version}")

    // MySQL driver
    include implementation ("mysql:mysql-connector-java:${mysql_version}")

    // JNA lib
    include "net.java.dev.jna:jna:${jna_version}"

}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(17)
}

java {
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

jar {
    from "LICENCE"
}

processResources {
    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand(["id": project.mod_id, "name": project.mod_name, "version": project.version])
    }
}

